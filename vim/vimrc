if v:progname == 'vi'
  set noloadplugins
endif

let mapleader=" "
let maplocalleader=","

if has('nvim')
  let g:python3_host_prog = '/usr/local/bin/python3'
  let g:ruby_host_prog = $HOME . '/.rbenv/versions/2.7.1/bin/neovim-ruby-host'
endif

let g:ruby_path = $HOME . '/.rbenv/versions/2.7.1/bin/neovim-ruby-host'

" Extension -> filetype mappings.
let filetype_m='objc'
let filetype_pl='prolog'

" Stark highlighting is enough to see the current match; don't need the
" centering, which can be annoying.
let g:LoupeCenterResults=0

" Would be useful mappings, but they interfere with my default window movement
" bindings (<C-j> and <C-k>).
let g:NERDTreeMapJumpPrevSibling='<Nop>'
let g:NERDTreeMapJumpNextSibling='<Nop>'

let g:NERDTreeCaseSensitiveSort=1

" Prevent tcomment from making a zillion mappings (we just want the operator).
let g:tcomment_mapleader1=''
let g:tcomment_mapleader2=''
let g:tcomment_mapleader_comment_anyway=''
let g:tcomment_textobject_inlinecomment=''

" The default (g<) is a bit awkward to type.
let g:tcomment_mapleader_uncomment_anyway='gu'

" Turn off most of the features of this plug-in; I really just want the folding.
let g:vim_markdown_override_foldtext=0
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_emphasis_multiline=0
let g:vim_markdown_conceal=0
let g:vim_markdown_frontmatter=1
let g:vim_markdown_new_list_item_indent=0

let s:vimrc_local=$HOME . '/.vim/vimrc.local'
if filereadable(s:vimrc_local)
  execute 'source ' . s:vimrc_local
endif

if has('gui')
  " Turn off scrollbars. (Default on macOS is "egmrL").
  set guioptions-=L
  set guioptions-=R
  set guioptions-=b
  set guioptions-=l
  set guioptions-=r
endif

function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !$(brew --prefix)/bin/python3 install.py --clangd-completer --java-completer --go-completer
  endif
endfunction

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-rbenv', { 'for': 'ruby' }

Plug 'jiangmiao/auto-pairs'
Plug 'chriskempson/base16-vim'
Plug 'wincent/ferret'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'stsewd/fzf-checkout.vim'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
Plug 'Yggdroot/indentLine'
Plug 'wincent/loupe'

if len(filter(argv(), 'isdirectory(v:val)')) > 0
  Plug 'preservim/nerdtree'
else
  Plug 'preservim/nerdtree', { 'on': ['NERDTree', 'NERDTreeCWD', 'NERDTreeClose', 'NERDTreeFind', 'NERDTreeFocus', 'NERDTreeFromBookmark', 'NERDTreeMirror', 'NERDTreeToggle'] }
  Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTree', 'NERDTreeCWD', 'NERDTreeClose', 'NERDTreeFind', 'NERDTreeFocus', 'NERDTreeFromBookmark', 'NERDTreeMirror', 'NERDTreeToggle'] }
endif

Plug 'wincent/pinnacle'
Plug 'wincent/replay'
Plug 'wincent/scalpel'
Plug 'tomtom/tcomment_vim'
Plug 'wincent/terminus'
Plug 'mbbill/undotree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'wincent/vim-clipper'
Plug 'tpope/vim-dispatch'
Plug 'wincent/vim-docvim'
Plug 'duggiefresh/vim-easydir'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-rooter'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-surround'
Plug 'vim-test/vim-test', { 'on': ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit'] }
Plug 'thinca/vim-textobj-comment'
Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'ruby' }
Plug 'kana/vim-textobj-user'
Plug 'chrisbra/vim-zsh'
Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }
call plug#end()

let g:deoplete#enable_at_startup = 1

filetype indent plugin on
syntax on

" After this file is sourced, plugin code will be evaluated.
" See ~/.vim/after for files evaluated after that.
" See `:scriptnames` for a list of all scripts, in evaluation order.
" Launch Vim with `vim --startuptime vim.log` for profiling info.
"
" To see all leader mappings, including those from plugins:
"
"   vim -c 'set t_te=' -c 'set t_ti=' -c 'map <space>' -c q | sort
"
