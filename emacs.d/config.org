#+title: Abram's Emacs Configuration
#+author: Abram Situmorang
#+email: abram.perdanaputra@gmail.com

* Welcome!

This is the configuration we've been building in the *[[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]]* series, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun abram/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

(add-hook 'emacs-startup-hook #'abram/display-startup-time)

#+end_src

* Load Private Variables

We might want to customize stuff locally.

#+begin_src emacs-lisp

  (let ((private-init-file "~/.emacs.d/private-init.el"))
    (when (file-exists-p private-init-file)
      (load-file private-init-file)))

#+end_src

* Package System Setup
** Bootsrap straight.el

A much better way to install packages than package.el.

#+begin_src emacs-lisp

  (setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
      (url-retrieve-synchronously
      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
      'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+end_src

** Configure straight.el with use-package
Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-protocol 'ssh)

#+end_src

* Theme
** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes)
  (use-package gruvbox-theme)
  (use-package material-theme)

  (use-package nord-theme
    :straight (nord-theme :type git
                          :host github
                          :repo "arcticicestudio/nord-emacs"
                          :fork "abrampers/nord-emacs"))
  (use-package ayu-theme
    :straight (ayu-theme :type git
                         :host github
                         :repo "vutran1710/Ayu-Theme-Emacs"
                         :fork "abrampers/Ayu-Theme-Emacs"))
  (use-package seti-theme
    :straight (seti-theme :type git
                          :host github
                          :repo "caisah/seti-theme"
                          :fork "abrampers/seti-theme"))

#+end_src

Activate theme.

#+begin_src emacs-lisp

  ;; (load-theme 'gruvbox-dark-hard t)
  ;; (load-theme 'doom-one t)
  ;; (load-theme 'nord t)
  ;; (load-theme 'ayu-dark t)
  ;; (load-theme 'seti t)
  (load-theme 'ayu-grey t)

#+end_src

* Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] package will show make initial buffer more usable.

#+begin_src emacs-lisp

  (use-package dashboard
    :custom
    (dashboard-startup-banner 'logo)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-set-footer nil)
    (dashboard-center-content t)
    (dashboard-projects-backend 'projectile)
    (dashboard-items '((projects . 5)
                       (recents . 5)
                       (agenda . 5)))
    :config
    (dashboard-setup-startup-hook))

#+end_src
* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Scroll compilation buffer whenever output came
  (setq compilation-scroll-output t)

#+end_src

Get that fancy dark transparent title bar on OSX.

#+begin_src emacs-lisp

  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark)))

#+end_src

** Font Configuration

I am using the [[https://github.com/cseelus/monego][Monego]] font for this configuration which will more than likely need to be installed on your machine. Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar abram/default-font-size 200)

  (set-face-attribute 'default nil :font "SauceCodePro Nerd Font Mono" :height abram/default-font-size)

  (setq default-frame-alist '((font . "SauceCodePro Nerd Font Mono-14")))

#+end_src

** Line Numbers Configuration

Setup line and column number mode.

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

#+end_src

Disable line numbers on certain modes.

#+begin_src emacs-lisp

  (dolist (mode '(org-mode-hook
                  dired-sidebar-mode-hook
                  compilation-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Cycle numbering.

#+begin_src emacs-lisp

  (defvar abram/current-numbering-style-index)
  (setq abram/current-numbering-style-index 0)
  (defvar abram/numbering-styles)
  (setq abram/numbering-styles '(t nil relative))

  (defun abram/cycle-numbering-style ()
    (interactive)
    (let ((next-numbering-index (% (+ abram/current-numbering-style-index 1) (length abram/numbering-styles))))
      (let ((next-numbering-style (nth next-numbering-index abram/numbering-styles)))
        (setq display-line-numbers next-numbering-style)
        (setq abram/current-numbering-style-index next-numbering-index))))

#+end_src

Highlight current line

#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'hl-line-mode)

#+end_src

** Set dashboard as initial buffer

#+begin_src emacs-lisp

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

** =xterm-color= for compilation modes

#+begin_src emacs-lisp
  (use-package xterm-color)

  (setq compilation-environment '("TERM=xterm-256color"))

  (defun abram/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))

  (advice-add 'compilation-filter :around #'abram/advice-compilation-filter)
#+end_src

* Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :commands auto-package-update-now)

#+end_src
* Environment Variables

When running emacs from the app, emacs won't have the user's shell environment variable. [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] will help us to sync user shell's environment variable with emacs environment variable.

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :if (or (memq window-system '(mac ns x)) (daemonp))
    :custom
    (exec-path-from-shell-arguments '("-l"))
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "PYENV_ROOT")
    (exec-path-from-shell-initialize))

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src
** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :custom
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-modification-icon t)
    (doom-modeline-modal-icon t)
    (doom-modeline-enable-word-count nil)
    (doom-modeline-buffer-encoding t)
    (doom-modeline-indent-info t)
    (doom-modeline-checker-simple-format t)
    (doom-modeline-vcs-max-length 30)
    (doom-modeline-env-version t)
    (doom-modeline-irc-stylize 'identity)
    (doom-modeline-github-timer nil)
    (doom-modeline-gnus-timer nil)
    :init
    (doom-modeline-mode 1))

#+end_src
** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package swiper)
  (use-package hydra)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-hydra
    :after (ivy hydra))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           ("M-x" . counsel-M-x) ;; Check if without this M-x still go to counsel
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :after (ivy counsel)
    :init
    (ivy-rich-mode 1))

#+end_src

To configure regex builder per function, please follow the steps on [[https://github.com/abo-abo/swiper/issues/2620][this issue]].

#+begin_src emacs-lisp

  (setq ivy-re-builders-alist
        '((lsp-ivy-workspace-symbol . ivy--regex-plus)
          (counsel-rg . ivy--regex-plus)
          (projectile-completing-read . ivy--regex-plus)
          (magit-rebase-branch . ivy--regex-plus)
          (magit-checkout . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Evil Mode
** =evil-mode=

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.

#+begin_src emacs-lisp

  (use-package undo-tree
    :after evil
    :config (global-undo-tree-mode))

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

** =evil-collection=

[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  (use-package evil-collection
   :after evil
   :config
   (evil-collection-init))

#+end_src

** =evil-org-mode=

[[https://github.com/Somelauw/evil-org-mode][evil-org-mode]] made sure evil works nicely with org mode.

#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

* Terminals
** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    :custom
    (vterm-buffer-name-string "vterm [%s]"))

#+end_src

* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings
**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

Since macOS =ls= command don't have =--group-directories-first= flag, we have to use =gls= that =coreutils= provided. Please make sure =coreutils= is installed in the system.

#+begin_src emacs-lisp

(setq insert-directory-program "gls" dired-use-ls-dired t)

#+end_src

Now here's the real =dired= configuration.

#+begin_src emacs-lisp

  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :commands (dired dired-jump))

  ;; (use-package all-the-icons-dired
  ;;   :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src
** VSCode Icons

To have cool icons on the tree, we're using [[https://github.com/jojojames/vscode-icon-emacs][vscode-icon-emacs]].

#+begin_src emacs-lisp

  (use-package vscode-icon
    :commands (vscode-icon-for-file))

#+end_src

** Dired Sidebar

[[https://github.com/jojojames/dired-sidebar][dired-sidebar]] is giving us the power of dired on sidebar. Just like we used to in typical editor.

#+begin_src emacs-lisp

  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :custom
    (dired-sidebar-theme 'vscode)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode)))))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =abram/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun abram/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.05)
                    (org-level-6 . 1.05)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :font "Monego" :weight 'regular :height (cdr face))))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun abram/org-mode-setup ()
    (org-indent-mode)
    (setq evil-auto-indent nil)
    (visual-line-mode 1))

  (use-package org-habit
    :straight (:type built-in)
    :after org
    :custom
    (org-habit-graph-column 60)
    :config
    (add-to-list 'org-modules 'org-habit))

  (use-package org
    :straight (:type built-in)
    :hook (org-mode . abram/org-mode-setup)
    :custom
    (org-directory abram/org-directory)
    (org-image-actual-width nil)
    (org-startup-folded 'content)
    (org-ellipsis " ▾")
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-agenda-files (list abram/org-directory abram/org-roam-directory))

    (org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "WIP(w!)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    :config
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?e)
         ("@home" . ?H)
         ("@work" . ?W)
         ("@spiritual" . ?s)
         ("@personal" . ?p)
         ("learn" . ?l)
         ("agenda" . ?a)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("emacs" . ?E)
         ("vim" . ?V)
         ("dev_env" . ?D)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "WIP"
          ((org-agenda-overriding-header "Current Tasks")))
        (tags-todo "+PRIORITY_QUADRANT=1"
          ((org-agenda-overriding-header "Quadrant 1 (Important + Urgent)")
           (org-agenda-max-todos 5)))
        (tags-todo "+PRIORITY_QUADRANT=2"
          ((org-agenda-overriding-header "Quadrant 2 (Important + Not Urgent)")
           (org-agenda-max-todos 5)))
        (tags-todo "+PRIORITY_QUADRANT=3"
          ((org-agenda-overriding-header "Quadrant 3 (Not Important + Urgent)")
           (org-agenda-max-todos 5)))
        (tags-todo "+PRIORITY_QUADRANT=4"
          ((org-agenda-overriding-header "Quadrant 4 (Not Important + Not Urgent)")
           (org-agenda-max-todos 5)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("p" "Prioritization"
       ((tags-todo "+PRIORITY_QUADRANT=1"
          ((org-agenda-overriding-header "Quadrant 1 (Important + Urgent)")))
        (tags-todo "+PRIORITY_QUADRANT=2"
          ((org-agenda-overriding-header "Quadrant 2 (Important + Not Urgent)")))
        (tags-todo "+PRIORITY_QUADRANT=3"
          ((org-agenda-overriding-header "Quadrant 3 (Not Important + Urgent)")))
        (tags-todo "+PRIORITY_QUADRANT=4"
          ((org-agenda-overriding-header "Quadrant 4 (Not Important + Not Urgent)")))
        (tags-todo "+PRIORITY_QUADRANT=\"\""
          ((org-agenda-overriding-header "Not prioritized yet")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "General Task" entry (file+olp "~/org/Inbox.org" "Inbox")
             "* TODO %?\n%U\n\n  %i" :empty-lines 0)
        ("tp" "Personal Task" entry (file+olp "~/org/Personal.org" "Personal")
             "* TODO %? :@personal:\n%U\n\n  %i" :empty-lines 0)
        ("te" "Errand" entry (file+olp "~/org/Inbox.org" "Inbox")
             "* TODO %? :@errand:\n%U\n\n  %i" :empty-lines 0)
        ("tw" "Work Task" entry (file+olp "~/org/Work.org" "Work")
             "* TODO %? :@work:\n%U\n%a\n%i" :empty-lines 0)
        ("ti" "Implementation Task" entry (file+olp "~/org/Work.org" "Work")
             "* TODO %? :implementation:\n%U\n%a\n%i" :empty-lines 0)
        ("td" "Development Environment Task" entry (file+olp "~/org/Dev.org" "Dev Enchancements")
             "* TODO %? :dev_env:\n%U\n%a\n%i" :empty-lines 0)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/org/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/org/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (abram/org-font-setup))

#+end_src

*** Automatically change TODO entry to automatically change to DONE when all children are done

#+begin_src emacs-lisp

  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun abram/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . abram/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =abram/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun abram/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.d/configuration.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'abram/org-babel-tangle-config)))

#+end_src

** Agenda notifications

I'm using [[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier]] for agenda notifications

#+begin_src emacs-lisp

  (use-package org-wild-notifier
    :config
    (setq alert-default-style 'osx-notifier)
    :init
    (org-wild-notifier-mode))

#+end_src

* Org Roam

[[https://github.com/org-roam/org-roam][org-roam]] reimplementation of Roam to implement [[https://zettelkasten.de/introduction/][Zettelkasten]] note taking style.

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename abram/org-roam-directory))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup))

#+end_src
* =restclient=

[[https://github.com/pashky/restclient.el][restclient]] is a postman in emacs. We can use this to run HTTP REST request.

#+begin_src emacs-lisp

  (use-package restclient
    :mode (("\\.http\\'" . restclient-mode)))

#+end_src

* Development
** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-switch-project-action #'projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map))

#+end_src

Set general keybinding to run =projectile-test-project=.

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd "tp") 'projectile-test-project)

#+end_src
*** Counsel Projectile

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :after projectile)
#+end_src
** LSP
*** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun abram/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(symbols))
    (setq lsp-lens-enable nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-eldoc-enable-hover t)
    (setq lsp-completion-show-detail t)
    (setq lsp-completion-show-kind t))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook
    (lsp-mode . abram/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :custom
    (lsp-file-watch-threshold 5000)
    (lsp-diagnostics-provider :flycheck)
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-signature-auto-activate '(:on-trigger-char :after-completion)))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** Code navigations & refactor using LSP

#+begin_src emacs-lisp

  (defun abram/evil-lsp-keybindings ()
    (evil-local-set-key 'normal (kbd "gd") 'lsp-find-definition)
    (evil-local-set-key 'normal (kbd "gi") 'lsp-find-implementation)
    (evil-local-set-key 'normal (kbd "gr") 'lsp-find-references)
    (evil-local-set-key 'normal (kbd "gy") 'lsp-find-type-definition)
    (evil-local-set-key 'normal (kbd ",r") 'lsp-rename))

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    :commands dap-debug
    :custom 
    (dap-auto-configure-features '(locals expressions tooltip))
    (dap-auto-show-output nil)
    :config
    (require 'dap-go)
    (dap-go-setup))

#+end_src

Run hydra when breakpoint is hit

#+begin_src emacs-lisp

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

#+end_src
** Flycheck

I'm using [[https://www.flycheck.org/en/latest/index.html][flycheck]] for code diagnostics.

#+begin_src emacs-lisp

  (use-package flycheck)

  (defvar-local flycheck-local-checkers nil)
    (defun +flycheck-checker-get(fn checker property)
      (or (alist-get property (alist-get checker flycheck-local-checkers))
          (funcall fn checker property)))
    (advice-add 'flycheck-checker-get :around '+flycheck-checker-get)


#+end_src

** Language Support
*** Go
**** =go-mode=

This is a basic configuration for the Go language so that =.go= files activate =go-mode= when opened.  We're also adding a hook to =go-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit Go code. For Go specific utis, we use [[https://github.com/dominikh/go-mode.el][go-mode]] package.

#+begin_src emacs-lisp

  (use-package go-mode
    :mode "\\.go\\'"
    :hook ((go-mode . lsp-deferred)
           (go-mode . abram/evil-lsp-keybindings)
           (go-mode . electric-pair-local-mode))
    :init
    (setq gofmt-command "goimports")
    (flycheck-mode)
    :config
    (add-hook 'before-save-hook 'gofmt-before-save))

  (defun abram/setup-golangci-lint ()
   (flycheck-golangci-lint-setup)
   (setq flycheck-local-checkers '((lsp . ((next-checkers . (golangci-lint)))))))

  (use-package flycheck-golangci-lint
    :hook (go-mode . abram/setup-golangci-lint)
    :init
    (setq flycheck-golangci-lint-disable-all t)
    (setq flycheck-golangci-lint-enable-linters '("staticcheck" "unused" "gosimple" "structcheck" "varcheck" "ineffassign" "deadcode" "typecheck" "stylecheck" "gosec" "unconvert" "gofmt" "unparam" "nakedret" "gochecknoinits" "depguard" "gocyclo" "misspell" "megacheck" "goimports" "govet" "whitespace"))
      (setq flycheck-golangci-lint-disable-all "5m"))

  (use-package go-playground
    :commands go-playground)

#+end_src

**** Setup tab width for golang files

Setup =tab-width= for =.go= files.

#+begin_src emacs-lisp

  (add-hook 'go-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)))

#+end_src

**** Custom project type

Read [[https://docs.projectile.mx/projectile/projects.html][projectile documentation]] on how to register custom projectile project types.

#+begin_src emacs-lisp

  (with-eval-after-load 'projectile
  
    (projectile-register-project-type 'go '("go.mod")
                                      :project-file "go.mod"
                                      :compile "make build"
                                      :test "make test"
                                      :test-suffix "_test"))

#+end_src

**** Run Tests Capability

For Go, I use [[https://github.com/nlamirault/gotest.el][gotest]] to run test in various level of granularity. In this section I am reimplementing functions that =gotest= package provided to adapt the flags to the specific Go version I'm using (Go 1.14.5).

#+begin_src emacs-lisp

    (defun abram/go-test-current-project ()
      "Launch go test on the current project."
      (interactive)
      (let ((packages (cl-remove-if (lambda (s) (s-contains? "/vendor/" s))
                                    (s-split "\n"
                                           (shell-command-to-string (format "cd %s && go list ./..." (projectile-project-root)))))))
        (go-test--go-test (s-join " " packages))))

    (defun abram/go-test-keybindings ()
      (require 'gotest)
      (evil-local-set-key 'normal (kbd "tt") 'go-test-current-test)
      (evil-local-set-key 'normal (kbd "tf") 'go-test-current-file)
      (evil-local-set-key 'normal (kbd "t.") 'go-test-current-test-cache)
      (evil-local-set-key 'normal (kbd "ts") 'abram/go-test-current-project))

    (use-package gotest
      :after go-mode
      :hook (go-mode . abram/go-test-keybindings)
      :init
      (setq go-test-args "-p 1"))

#+end_src

**** Debug Keybindings

#+begin_src emacs-lisp

  (defun abram/go-test-debug ()
    (interactive)
    (let ((func-name (nth 1 (go-test--get-current-test-info)))
          (suite-name (nth 0 (go-test--get-current-test-info))))
      (if (= (length suite-name) 0)
        (dap-debug 
            (list :type "go"
                :request "launch"
                :name (format "Launch test %s" func-name)
                :mode "auto"
                :program default-directory
                :buildFlags nil
                :args (format "-test.v -test.run %s" func-name)
                :env nil
                :envFile nil))
        (dap-debug 
            (list :type "go"
                :request "launch"
                :name (format "Launch test %s.%s" suite-name func-name)
                :mode "auto"
                :program default-directory
                :buildFlags nil
                :args (format "-test.v -testify.m %s" func-name)
                :env nil
                :envFile nil)))))

              
(add-hook 
  'go-mode-hook
  (lambda ()
    (evil-local-set-key 'normal (kbd "td") 'abram/go-test-debug)))

#+end_src

**** TODO Text object

*** TODO Java

*** Ruby

#+begin_src emacs-lisp

(add-hook 'ruby-mode-hook
          (lambda ()
            (abram/evil-lsp-keybindings)
            (lsp)))

#+end_src

**** Run Tests Capability

For Ruby, I use [[https://github.com/pezra/rspec-mode][rspec-mode]] to run test in various level of granularity. 

#+begin_src emacs-lisp

  (defun abram/rspec-keybindings ()
    (evil-local-set-key 'normal (kbd "tt") 'rspec-verify-single)
    (evil-local-set-key 'normal (kbd "tf") 'rspec-verify-matching)
    (evil-local-set-key 'normal (kbd "t.") 'rspec-rerun)
    (evil-local-set-key 'normal (kbd "ts") 'rspec-verify-all))

  (use-package rspec-mode
    :hook (ruby-mode . abram/rspec-keybindings))

#+end_src

*** Clojure
**** =clojure-mode=

[[https://github.com/clojure-emacs/clojure-mode/][clojure-mode]] for =.clj= languages.

#+begin_src emacs-lisp

  (use-package clojure-mode
    :mode "\\.clj\\'")

#+end_src

**** cider

[[https://github.com/clojure-emacs/cider][cider]] is used for REPL capability for clojure in Emacs.

#+begin_src emacs-lisp

  (use-package cider
    :hook ((clojure-mode . cider-mode)
           (clojure-mode . company-mode)
           (cider-repl-mode . company-mode))
    :bind (:map cider-mode-map
           ("TAB" . company-indent-or-complete-common)))

#+end_src

Add hook to format buffer for clojure files.

#+begin_src emacs-lisp

  (defun abram/cider-format-for-clj ()
    (when (member (file-name-extension (buffer-file-name))
                  '("clj" "cljs" "cljc"))
      (cider-format-buffer)))

  (add-hook 'cider-mode-hook
            (lambda () (add-hook 'before-save-hook #'abram/cider-format-for-clj)))

#+end_src

*** C/C++

We're using [[https://github.com/MaskRay/ccls][ccls]] for C family lsp.

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
#+end_src

Use electric pair mode on c/c++ mode

#+begin_src emacs-lisp

  (add-hook 'c-mode-hook 'electric-pair-local-mode)
  (add-hook 'c++-mode-hook 'electric-pair-local-mode)
  (add-hook 'objc-mode-hook 'electric-pair-local-mode)
  (add-hook 'cuda-mode-hook 'electric-pair-local-mode)

#+end_src

**** CMake

#+begin_src emacs-lisp

  (use-package cmake-font-lock
    :mode ("CMakeLists\\.txt\\'" .  cmake-mode))

#+end_src

*** Protobuf
#+begin_src emacs-lisp

  (use-package protobuf-mode
    :mode "\\.proto\\'")

  (defconst abram/protobuf-style
    '((c-basic-offset . 4)
      (indent-tabs-mode . nil)))

  (add-hook 'protobuf-mode-hook
    (lambda () (c-add-style "my-style" abram/protobuf-style t)))
#+end_src

*** Python

#+begin_src emacs-lisp :tangle no

  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                            (lsp-deferred)))
    :custom
    (lsp-pyright-venv-path (format "%s/versions" (getenv "PYENV_ROOT"))))

#+end_src

#+begin_src emacs-lisp

  (setq lsp-pyls-plugins-jedi-use-pyenv-environment t)

  (use-package pyenv-mode
    :hook ((python-mode . pyenv-mode)
           (python-mode . electric-pair-local-mode)
           (python-mode . lsp-deferred)))

#+end_src

*** JavaScript

#+begin_src emacs-lisp

  (add-hook 'js-mode-hook
            (lambda ()
              (setq tab-width 2)
              (setq js-indent-level 2)))

#+end_src

*** zsh

#+begin_src emacs-lisp

(add-to-list 'auto-mode-alist '("zshrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zshrc\\.local\\'" . sh-mode))

#+end_src

** Markup language support

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src
** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("C-j" . company-select-next))
    (:map lsp-mode-map
          ("TAB" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-idle-delay 0.0))

#+end_src

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp :tangle no

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :init
    (setq company-box-enable-icon nil))

#+end_src
** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :init
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))

#+end_src

** =gitgutter=

I'm using [[https://github.com/emacsorphanage/git-gutter][git-gutter.el]] to show differences on newly added text.

#+begin_src emacs-lisp

  (use-package git-gutter
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (global-git-gutter-mode t))

#+end_src

** browse-at-remote

[[https://github.com/rmuslimov/browse-at-remote][browse-at-remote]] can be used to open point in github/gitlab.

#+begin_src emacs-lisp

  (use-package browse-at-remote
    :commands browse-at-remote
    :bind (("C-c g g" . browse-at-remote)))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook ((clojure-mode . rainbow-delimiters-mode)
         (lisp-mode . rainbow-delimiters-mode)
         (emacs-lisp-mode . rainbow-delimiters-mode)))

#+end_src

** Indentation

Disable tabs when indenting a region by default and set =tab-width= default value.

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

#+end_src

Enable =whitespace-mode= when starting =prog-mode=.

#+begin_src emacs-lisp

  (use-package whitespace
    :hook ((prog-mode . whitespace-mode)
           (text-mode . whitespace-mode))
    :init
    (setq whitespace-style '(face tabs empty trailing tab-mark)))

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/linktohack/evil-commentary][evil-commentary]] to provide a more familiar behavior (just like in vim).

#+begin_src emacs-lisp

  (use-package evil-commentary
    :hook ((prog-mode . evil-commentary-mode)
           (org-mode . evil-commentary-mode))
    :config
    (evil-commentary-mode))

#+end_src

** Paranthesis related stuff
*** =smartparens=

[[https://github.com/Fuco1/smartparens][smartparens]] is used to make dealing with pairs easier in Emacs.

#+begin_src emacs-lisp

  (use-package smartparens
    :hook ((clojure-mode . smartparens-strict-mode)
           (emacs-lisp-mode . smartparens-strict-mode)))

#+end_src

*** =evil-smartparens=

[[https://github.com/expez/evil-smartparens][evil-smartparens]] makes evil play nice with smartparens.

#+begin_src emacs-lisp

  (use-package evil-smartparens
    :hook ((smartparens-mode . evil-smartparens-mode)
           (smartparens-strict-mode . evil-smartparens-mode)))

#+end_src

*** =evil-surround=

[[https://github.com/emacs-evil/evil-surround][evil-surround]] emulates [[https://github.com/tpope/vim-surround][surround.vim]] by [[Tim Pope][https://github.com/tpope]].

#+begin_src emacs-lisp

  (use-package evil-surround
    :commands
    (evil-surround-region evil-surround-edit evil-Surround-edit evil-Surround-region)
    :config
    (global-evil-surround-mode 1))

#+end_src

** Folding

[[https://github.com/gregsexton/origami.el][origami]] will enable us to fold code. [[https://github.com/emacs-lsp/lsp-origami][lsp-origami]] will enable us to use lsp's code folding feature.

#+begin_src emacs-lisp

  (use-package lsp-origami
    :hook (lsp-mode . lsp-origami-try-enable))

#+end_src

** Makefile

I'm using [[https://github.com/thiderman/makefile-executor.el][makefile-executor]] to execute makefiles quickly.

#+begin_src emacs-lisp

  (use-package makefile-executor
    :commands makefile-executor-execute-project-target
    :config
    (add-hook 'makefile-mode-hook 'makefile-executor-mode))

  (defun abram/make-test-current-project ()
    "Launch make test on the current project"
    (interactive)

    (let ((filename (format "%s/Makefile" (projectile-project-root))))
      (makefile-executor-execute-target filename "test")))

#+end_src

Keybindings for makefile

#+begin_src emacs-lisp

  (add-hook
    'prog-mode-hook
    (lambda ()
      (evil-local-set-key 'normal (kbd "m SPC") 'makefile-executor-execute-project-target)
      (evil-local-set-key 'normal (kbd "m t") 'abram/make-test-current-project)))

#+end_src

* Writing

** =ox-hugo=

[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] will help us write blog in org files. Nice isn't it?

#+begin_src emacs-lisp

  (use-package ox-hugo
    :after ox)

#+end_src

*** Add =org-capture= template

#+begin_src emacs-lisp

  (with-eval-after-load 'org-capture
    (defun abram/org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: "))
             (fname (org-hugo-slug title)))
        (mapconcat #'identity
                   `(
                     ,(concat "* TODO " title)
                     ":PROPERTIES:"
                     ,(concat ":EXPORT_FILE_NAME: " fname)
                     ":END:"
                     "#+toc: headlines 1 local"
                     "\n"
                     "%?\n\n\n")
                   "\n")))

    (add-to-list 'org-capture-templates
                 '("b"
                   "Hugo blogpost"
                   entry
                   (file+olp abram/blog-content-org-file "posts")
                   (function abram/org-hugo-new-subtree-post-capture-template)
                   :empty-lines 1)))

#+end_src

* Keybinding Configuration
** ESC cancels all

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** General

[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer abram/leader-keys-map
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (abram/leader-keys-map
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

** Others

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Make SPC-# to cycle numbering modes
  (abram/leader-keys-map
      "#" 'abram/cycle-numbering-style)

#+end_src

** Debugger

Hydra debugger prefix

#+begin_src emacs-lisp

  (general-define-key
    :keymaps 'lsp-mode-map
    :prefix lsp-keymap-prefix
    "d" '(dap-hydra t :wk "debugger"))

#+end_src

Toggling breakpoints

#+begin_src emacs-lisp

(add-hook 
  'prog-mode-hook
  (lambda ()
    (evil-local-set-key 'normal (kbd "mb") 'dap-breakpoint-toggle)))

#+end_src

** Org Mode

Key bindings to call =org-agenda= and =org-capture=.

#+begin_src emacs-lisp

  (abram/leader-keys-map
    "g"  '(:ignore t :which-key "org-mode helper prefixes")
    "ga" 'org-agenda
    "gc" 'org-capture)

#+end_src

** Buffer & Window management
*** Buffer management

Close everything except current window using =SPC-o=.

#+begin_src emacs-lisp

  (abram/leader-keys-map
      "o" 'delete-other-windows)

#+end_src

Navigating two most recent buffers.

#+begin_src emacs-lisp

  (defun abram/switch-to-most-recent-buffer ()
    "Switch to previously open buffer. Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (evil-global-set-key 'normal (kbd ",v") 'abram/switch-to-most-recent-buffer)

#+end_src

Next & Previous buffers

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd ",b") 'previous-buffer)
  (evil-global-set-key 'normal (kbd ",f") 'next-buffer)

#+end_src

*** Window management

- Use =C-w= prefix for moving windows around.
- Use =C-x 5= for moving around frames.
- Use =s-`= to move to other frame.

Add keybinding for easier window navigation

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd "C-s-h") 'evil-window-left)
  (evil-global-set-key 'normal (kbd "C-s-j") 'evil-window-down)
  (evil-global-set-key 'normal (kbd "C-s-k") 'evil-window-up)
  (evil-global-set-key 'normal (kbd "C-s-l") 'evil-window-right)

#+end_src
** Dired

#+begin_src emacs-lisp

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer
    "H" 'dired-hide-dotfiles-mode)

  (evil-collection-define-key 'normal 'dired-sidebar-mode-map
    "h" 'dired-sidebar-up-directory
    "l" 'dired-sidebar-find-file)

#+end_src

** Vim-like Keybindings

Since I'm moving from vim environment, I like my emacs to have a similar keybinding with my vim configuration.

*** Quick Write

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd ",w") 'evil-write)

#+end_src

*** Quick folding

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd "=") 'evil-toggle-fold)

#+end_src

*** Project Navigation

Find file using =C-p=.

#+begin_src emacs-lisp

  (evil-global-set-key 'normal (kbd "C-p") 'projectile-find-file)

#+end_src

Search in project using =SPC-f=.

#+begin_src emacs-lisp

  (abram/leader-keys-map
    "f" 'counsel-projectile-rg)

#+end_src

*** Navigate to Test Files

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook
          (lambda ()
            (evil-local-set-key 'normal (kbd ",a") 'projectile-toggle-between-implementation-and-test)
            (evil-ex-define-cmd "A" 'projectile-toggle-between-implementation-and-test)
            (evil-ex-define-cmd "AV" 'projectile-find-implementation-or-test-other-window)))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
